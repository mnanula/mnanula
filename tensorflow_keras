import tensorflow as tf
mnist = tf.keras.datasets.mnist

# Split Training and Test Data
(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train, x_test = x_train / 255, x_test / 255

# Build Model
model = tf.keras.models.Sequential([
  tf.keras.layers.Flatten(input_shape=(28, 28)),
  tf.keras.layers.Dense(128, activation='relu'),
  tf.keras.layers.Dropout(0.2),
  tf.keras.layers.Dense(10)
	])

# Get Predictions
predictions = model(x_train[:1]).numpy()
#predictions

# Convert to Probabilities
tf.nn.softmax(predictions).numpy()

# Get Loss Function
loss_fn = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)
loss_fn(y_train[:1], predictions).numpy()

# Compile the model
model.compile(optimizer = 'adam',
			  loss = loss_fn,
			  metrics = ['accuracy'])

# Fit model
model.fit(x_train, y_train, epochs = 5)

# Evaluate Model
model.evaluate(x_test, y_test,verbose = 2)

# Return probability

probability_model = tf.keras.Sequential([
	model,
	tf.keras.layers.Softmax()
	])

probability_model(x_test[:5])


